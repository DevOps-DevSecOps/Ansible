[Version]
ansible –-version

[Inventory]
● Custom Inventory
ansible-inventory -i FILE_NAME --list
ansible-inventory -i FOLDER_NAME/FILE_NAME --list
ansible-inventory -i /FOLDER_NAME/FILE_NAME --list
ansible-inventory -i FILE_NAME --graph
● Dynamic Inventory
ansible-inventory -i FILE_NAME.yml --graph

[Ad-Hoc]
● Static Inventory
ansible all --list-hosts
ansible all -m ping
ansible all -m ping -u USER_NAME
ansible all -m setup
ansible all -m shell -a 'whoami' -u USER_NAME
ansible all -m shell -a 'whoami' -u USER_NAME --become
ansible all -m shell -a 'free -m'
ansible all -m user -a "name=foo state=absent"                                                 # removal of user accounts that may exist 
ansible all -m user -a "name=foo password=<crypted password here>"                             # creation and manipulation of existing user accounts
ansible HOSTNAME_OR_HOSTIPADDRESS -m ping
ansible HOSTNAME_OR_HOSTIPADDRESS -m setup
ansible GROUPNAME_HOSTS --list-hosts
ansible GROUPNAME_HOSTS -a "echo Hello World" -u USER_NAME
ansible GROUPNAME_HOSTS -m setup
ansible GROUPNAME_HOSTS -m ping
ansible GROUPNAME_HOSTS -m shell -a "whoami" -u USER_NAME
ansible GROUPNAME_HOSTS -m shell -a 'echo $TERM'
ansible GROUPNAME_HOSTS -m shell -a 'df -Th'
ansible GROUPNAME_HOSTS -m shell -a 'ls -l > FILE_NAME.txt'
ansible GROUPNAME_HOSTS -m shell -a "ls -lrt  ~/.ssh/FILE_NAME"
ansible GROUPNAME_HOSTS -m command -a 'hostname'
ansible GROUPNAME_HOSTS -m command -a 'cat temp.txt'
ansible GROUPNAME_HOSTS -m file -a "dest=/FOLDER_NAME/FOLDER_NAME/FILE_NAME mode=600"          # changing ownership and permissions on files
ansible GROUPNAME_HOSTS -m file -a 'dest=/FOLDER_NAME/FOLDER_NAME/FILE_NAME mode=600 owner=ansible group=ansible'
ansible GROUPNAME_HOSTS -m file -a "dest=/FOLDER_NAME/FOLDER_NAME/FILE_NAME mode=600 owner=mdehaan group=mdehaan"
ansible GROUPNAME_HOSTS -m file -a "dest=/FOLDER_NAME/FOLDER_NAME/FILE_NAME state=absent"      # delete a file
ansible GROUPNAME_HOSTS -m file -a "dest=/FOLDER_NAME/FOLDER_NAME/FOLDER_NAME state=directory mode=755"                                             # create a directory
ansible GROUPNAME_HOSTS -m file -a "dest=/FOLDER_NAME/FOLDER_NAME/FOLDER_NAME mode=755 owner=mdehaan group=mdehaan state=directory"                         # create a directory, similar to "mkdir -p"
ansible GROUPNAME_HOSTS -m file -a "dest=/FOLDER_NAME/FOLDER_NAME state=absent"                                                 # delete a directory, directory and all its contents will be deleted
ansible GROUPNAME_HOSTS -m copy -a "src=FILE_NAME dest=/FOLDER_NAME/FOLDER_NAME/FILE_NAME"                                      # copying files to multiple target machines
ansible GROUPNAME_HOSTS -m copy -a "src=/FOLDER_NAME/FILE_NAME dest=/FOLDER_NAME/FILE_NAME"
ansible GROUPNAME_HOSTS -m copy -a "src=~/FOLDER_NAME/FILE_NAME dest=/FOLDER_NAME/FILE_NAME owner=apache group=apache mode=0644"
ansible GROUPNAME_HOSTS -m user -a 'name=user1 password=user1' --become                        # create the user, become–privilege to the superuser to run the command
ansible GROUPNAME_HOSTS -m user -a 'name=user1 state=absent' --become                          # delete the user (state=absent) 
ansible GROUPNAME_HOSTS -m yum -a "name=acme state=present"                                    # package is installed, but don’t update it
ansible GROUPNAME_HOSTS -m yum -a "name=acme-1.5 state=present"                                # package is installed to a specific version
ansible GROUPNAME_HOSTS -m yum -a "name=acme state=latest"                                     # package is at the latest version
ansible GROUPNAME_HOSTS -m yum -a "name=acme state=absent"                                     # package is uninstalled  
ansible GROUPNAME_HOSTS –m yum -a "name=git state=present" --become
ansible GROUPNAME_HOSTS -m yum -a "name=git state=latest"                                      # package is installed & update it to the latest version
ansible GROUPNAME_HOSTS -m yum -a "name=httpd state=present" --become
ansible GROUPNAME_HOSTS -m yum -a "name=maven state=absent" --become
ansible GROUPNAME_HOSTS -m service -a "name=httpd state=started"                               # service is started on GROUPNAME_HOSTS
ansible GROUPNAME_HOSTS -m service -a "name=httpd state=started" --become
ansible GROUPNAME_HOSTS -m service -a "name=httpd state=restarted"                             # restart a service on GROUPNAME_HOSTS 
ansible GROUPNAME_HOSTS -m service -a "name=httpd state=restarted" --become
ansible GROUPNAME_HOSTS -m service -a "name=httpd state=stopped"                               # service is stopped on GROUPNAME_HOSTS
ansible GROUPNAME_HOSTS -m service -a "name=httpd state=stopped" --become
ansible GROUPNAME_HOSTS -m git -a "repo=https://foo.example.org/repo.git dest=/srv/myapp version=HEAD"
● Custom Inventory
ansible all -i FILE_NAME -a "hostname" -u USER_NAME
ansible all -i FILE_NAME -m ping
ansible all -i FILE_NAME -m ping -u USER_NAME
ansible all -i FILE_NAME --key-file ~/.ssh/PRIVATE_KEY_FILE_NAME -m ping -u USER_NAME
ansible GROUPNAME_HOSTS -i FILE_NAME -m ping
ansible GROUPNAME_HOSTS -i FILE_NAME -m shell -a "ls -lrt /FOLDER_NAME/FOLDER_NAME"
ansible GROUPNAME_HOSTS -i FILE_NAME -m copy -a "src=~/FOLDER_NAME/FILE_NAME dest=/FOLDER_NAME/FILE_NAME owner=apache group=apache mode=0644" -b
ansible GROUPNAME_HOSTS -i FILE_NAME -m copy -a "src=~/FOLDER_NAME/FOLDER_NAME dest=/FOLDER_NAME/FOLDER_NAME/ owner=apache group=apache mode=0644" -b
ansible GROUPNAME_HOSTS -i FILE_NAME -m command -a 'uptime'
ansible GROUPNAME_HOSTS -i FILE_NAME -m command -a "uname -a"
ansible GROUPNAME_HOSTS -i FILE_NAME -m command -a "df -h"
ansible GROUPNAME_HOSTS -i FILE_NAME -m command -a "ls FOLDER_NAME/" -b --limit HOSTNAME_OR_HOSTIPADDRESS
ansible GROUPNAME_HOSTS -i FILE_NAME -m find -a "paths='/FOLDER_NAME/FOLDER_NAME' file_type=file patterns='*.FORMAT'"
● Dynamic Inventory
ansible -i FILE_NAME us-east-1d -u USER_NAME -m ping
ansible -i /FOLDER_NAME/FILE_NAME.yaml ec2 -m ping --private-key=/home/USER_NAME/FILE_NAME.pem
ansible -i /FOLDER_NAME/FILE_NAME.yaml ec2 -m apt -a 'name=git state=present' --private-key=/home/USER_NAME/FILE_NAME.pem --become
ansible -i /FOLDER_NAME/FILE_NAME.yaml ec2 -m apt -a 'name=git state=present' --private-key=~/.ssh/FOLDER_NAME/PRIVATE_KEY_FILE_NAME --become

[Playbooks]
● Static Inventory
ansible-playbook FILE_NAME.yml
ansible-playbook FILE_NAME.yml -c local
ansible-playbook FILE_NAME.yml -vvv
ansible-playbook FILE_NAME.yml -u USER_NAME
ansible-playbook FILE_NAME.yml --ask-become-pass                                                        # need to provide the password for the sudo privilege
ansible-playbook FILE_NAME.yml --list-tasks
ansible-playbook FILE_NAME.yml --list-hosts
ansible-playbook FILE_NAME.yml --syntax-check
ansible-playbook FILE_NAME.yml --diff
ansible-playbook FILE_NAME.yml --check
ansible-playbook FILE_NAME.yml --check --diff
ansible-playbook FILE_NAME.yml --check --diff --limit HOSTNAME_OR_HOSTIPADDRESS
ansible-playbook FILE_NAME.yml -l HOSTNAME_OR_HOSTIPADDRESS
ansible-playbook FILE_NAME.yml -e NAME=VALUE
ansible-playbook FILE_NAME.yml -e "NAME=VALUE"
ansible-playbook FILE_NAME.yml -e "VARIABLE='VALUE' VARIABLE='VALUE'"
ansible-playbook FILE_NAME.yml --extra-vars "NAME=VALUE"
ansible-playbook FILE_NAME.yml --extra-vars "NAME=VALUE NAME=VALUE"
ansible-playbook FILE_NAME.yml --extra-vars="NAME=VALUE"
ansible-playbook FILE_NAME.yml --extra-vars '{"NAME":"VALUE"}'                                          # JSON extra variable
ansible-playbook FILE_NAME.yml --extra-vars '{ "VARIABLE": "VALUE", "VARIABLE": "VALUE" }'
ansible-playbook FILE_NAME.yml --list-tags                                                              # list the tags in a playbook
ansible-playbook FILE_NAME.yml -t TAG_NAME
ansible-playbook FILE_NAME.yml -t TAG_NAME,TAG_NAME
ansible-playbook FILE_NAME.yml --tags TAG_NAME                                                          # execute the playbook with the specific tag will trigger that particular task
ansible-playbook FILE_NAME.yml --tags TAG_NAME -u USER_NAME
ansible-playbook FILE_NAME.yml --tags TAG_NAME -u USER_NAME -vvv
ansible-playbook FILE_NAME.yml --tags TAG_NAME --limit HOSTNAME_OR_HOSTIPADDRESS
ansible-playbook FILE_NAME.yml --tags "TAG_NAME,TAG_NAME"
ansible-playbook FILE_NAME.yml --tags "TAG_NAME, TAG_NAME"
ansible-playbook FILE_NAME.yml --tags "TAG_NAME, TAG_NAME" --list-tasks
ansible-playbook FILE_NAME.yml --skip-tags TAG_NAME
ansible-playbook FILE_NAME.yml --skip-tags "TAG_NAME"
ansible-playbook FILE_NAME.yml --skip-tags "TAG_NAME,TAG_NAME"
● Custom Inventory
ansible-playbook -i FILE_NAME FILE_NAME.yml
ansible-playbook -i FILE_NAME -i FILE_NAME FILE_NAME.yml
ansible-playbook -i FILE_NAME FILE_NAME.yml -C                                                           # dry run the playbook
ansible-playbook -i FILE_NAME FILE_NAME.yml -v
ansible-playbook -i FILE_NAME FILE_NAME.yml -u USER_NAME
ansible-playbook -i FOLDER_NAME/FILE_NAME FILE_NAME.yaml --become-user=USER_NAME
ansible-playbook -i FILE_NAME FILE_NAME.yml --syntax-check
ansible-playbook -i /FOLDER_NAME/FOLDER_NAME /FOLDER_NAME/FILE_NAME.yml --syntax-check
ansible-playbook -i /FOLDER_NAME/FOLDER_NAME /FOLDER_NAME/FILE_NAME.yml --connection=local --sudo
ansible-playbook -i FILE_NAME FILE_NAME.yml --extra-vars="NAME=VALUE"
ansible-playbook -i FILE_NAME FILE_NAME.yml --extra-vars='{"NAME":"VALUE"}'                              # JSON extra variable
ansible-playbook -i FILE_NAME FILE_NAME.yml --tags=TAG_NAME
ansible-playbook -i FILE_NAME FILE_NAME.yml --tags=TAG_NAME,TAG_NAME
ansible-playbook -i FILE_NAME FILE_NAME.yml --skip-tags=TAG_NAME
ansible-playbook -i FILE_NAME FILE_NAME.yml --key-file=FILE_NAME.pem

[Vault]
ansible-vault create FILE_NAME.yml                                                      # create new encrypted file
ansible-vault encrypt FILE_NAME.yml                                                     # encrypt an already existing file which is unencrypted
ansible-vault view FILE_NAME.yml
ansible-vault edit FILE_NAME.yml                                                        # to make changes to an already existing file which is encrypted
ansible-vault rekey FILE_NAME.yml                                                       # reset or change the Vault password of the file
ansible-vault decrypt FILE_NAME.yml                                                     # decrypt a file
ansible-playbook FILE_NAME.yml --ask-vault-pass                                         # deprecated,
ansible-playbook FILE_NAME.yml --vault-id @prompt                                       #
ansible-playbook FILE_NAME.yml --vault-password-file /FOLDER_NAME/FILE_NAME             # deprecated, to specify the path to the file that contains the stored password
ansible-playbook FILE_NAME.yml --vault-id /FOLDER_NAME/FILE_NAME                        #
